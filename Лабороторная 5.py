'''Измайлов Михаил ИУ7-13Б
Программа для построения графика функции'''
import math

while True:
    start = float(input('Введите начальное значение интервала: ')) # начальное значение аргумента
    end = float(input('Введите конечное значение интервала: ')) # конечное значение аргумента
    if start < end: break
    print('Повторите ввод. Начальное значение интервала должно быть меньше конечного')
while True:
    step = float(input('Введите шаг: ')) # шаг разбиения
    if step > 0: break
    print('Повторите ввод. Шаг должно быть положительным числом')

# вывод заголовка таблицы
print('\n--------------------------------------------------')
print('|    y    |    z1    |    z2    |       z3       |')
print('--------------------------------------------------')
min_z2 = float('inf') # переменнная для поиска минимального числа
max_z2 = float('-inf') # переменнная для поиска максимального числа
start_rezerve = start # пременная для хранения первого числа последовательности
while start < end: # счистать до тех пор пока левая часть интервала е совпадет с правым
    y = start # задаем y
    # считаем значения трех функций
    z1 = y*2**y - 1
    z2 = 2*y**3 + 3*y**2 - 6*y + 1.5
    z3 = (z1*z2)**(1/3)
    # поиск минимального и максимального значения
    min_z2 = min(min_z2, z2)
    max_z2 = max(z2, max_z2)
    # вывод
    print(f'|{y:^9.5g}|{z1:^10.5g}|{z2:^10.5g}|{z3:^16.5g}|')
    start += step # повышаем на шаг левую границу интервала
print('--------------------------------------------------')

while True:
    serifs = int(input('\nВведите количество заcечек: ')) # ввод количества засечек
    if 4 <= serifs <= 8: break # проверка на ввод
    print('Число засечек должно быть от 4 до 8')

start = start_rezerve # возвращаем элементу старт начальное значение
interval = abs(max_z2 - min_z2) / 80 # высчитываем интервал
min_z2_rezerve = min_z2 # сохраняем значени z2 мнимального
print('          ', end = '') # начинаем вывод строки значений
count = 1 # счетчик
count_conclusion = 0
while min_z2 < max_z2 or math.isclose(min_z2, max_z2): # двигаем курсор по строке пока не дойдем до макимального значения
    if (count - 1) % ((80 - 1) // (serifs - 1)) == 0 and count_conclusion < (serifs - 1): # проверка на вывод значения
        print(f'{min_z2:<8.5g}', end = '')
        count += 8 # повышаем счетчик на количество занятых позиций
        min_z2 += interval*8 # по такой же логике поднимаем значение интервала
        count_conclusion += 1
    else:
        print(' ', end = '') # ставим пропуск
        count += 1 # повышаем счетчик на количество занятых позиций
        min_z2 += interval # по такой же логике поднимаем значение интервала
    if count == 80: 
            print(f'{max_z2:<8.5g}', end = '')

print('\n',end = '') # начинаем ввод строк функции
y0 = 0 # переменная для постоения линии
while start < end: # перебор элементов
    y = start # задаем y
    z2 = 2*y**3 + 3*y**2 - 6*y + 1.5 # высчитываем значение
    count = 0 # заводим счетчик для строки
    min_z2 = min_z2_rezerve # возвращаем значение минимальному элементу
    print(f'{y:<10.5g}',end = '') # выводим олин элемент абциссы
    while count <= 80: # начинаем пробигаться по значениям
        if min_z2 <= y0 < min_z2 + interval: # проверяем входит ли 0 в интервад значений
                print('|', end = '')
        else:
            if min_z2 <= z2 < min_z2 + interval: # проверяем принадлежность точки интервалу значений
                print('*', end = '')
            else:
                print(' ', end = '')
        min_z2 += interval # двигаем интервал
        count += 1 # повышаем счетчик
    print('\n', end = '')
    start += step # двигаем правую границу

start = start_rezerve
z3_mx = float('-inf')
while start < end: # условие для перебора
    y = start
    # вычисление функций
    z1 = y*2**y - 1
    z2 = 2*y**3 + 3*y**2 - 6*y + 1.5
    z3 = z1*z2
    if z3 > z3_mx: # сравниваем имеющияся максимум с кандидатом
         z3_mx = z3 
         y_mx = y
    start += step # счетчик на 1

z3_mx = z3**(1/3)
print(f'\nМаксимальное значение на данном промежутке: {z3_mx:.5g}')
print(f'Максимум: {y_mx:.5g}')